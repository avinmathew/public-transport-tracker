var DEFAULT_LAT=-27.4698,DEFAULT_LNG=153.0251,DEFAULT_ZOOM=15,LATLNG_DECIMAL_PLACES=6,REFRESH_INTERVAL=2e4,INITIAL_SPEED=40,STOP_DURATION=15e3,MOVEMENT_THRESHOLD=.02,PATH_THRESHOLD=.02,LABEL_SHOW_ZOOM_LEVEL=12,ARBITARY_DATE="2000-01-01T",$refresh=document.getElementById("refresh"),spinner=new Spinner({radius:4,width:2,length:6}),search=URI().search(!0),routes=[];search.routes&&(routes=search.routes.split(","));var map=L.map("map",{attributionControl:!1});if(search.lat&&search.lng){var zoom=search.z||DEFAULT_ZOOM;map.setView([search.lat,search.lng],zoom)}else map.setView([DEFAULT_LAT,DEFAULT_LNG],DEFAULT_ZOOM);!navigator.geolocation||search.lat&&search.lng||navigator.geolocation.getCurrentPosition(function(position){map.setView([position.coords.latitude,position.coords.longitude],DEFAULT_ZOOM)}),map.on("moveend",function(e){var latlng=map.getCenter(),url=URI().setSearch({lat:latlng.lat.toFixed(LATLNG_DECIMAL_PLACES),lng:latlng.lng.toFixed(LATLNG_DECIMAL_PLACES),z:map.getZoom()});window.history.pushState("","",url.toString())});var googleMaps=L.gridLayer.googleMutant({type:"roadmap"}).addTo(map);googleMaps.addGoogleLayer("TrafficLayer");var shapeGroup=L.layerGroup().addTo(map),layerGroup=L.layerGroup().addTo(map),vehicleLayerLookup={};function toggleLabels(){var zoom=map.getZoom();for(var id in vehicleLayerLookup){var marker=vehicleLayerLookup[id];marker._icon&&(LABEL_SHOW_ZOOM_LEVEL<=zoom?L.DomUtil.removeClass(marker._icon,"hide-label"):L.DomUtil.addClass(marker._icon,"hide-label"))}}function vehicleLabel(route,direction){var html='<span class="vehicle-label">';return"inbound"===direction&&(html+="&lt;"),html+=route,"outbound"===direction&&(html+="&gt;"),html+="</span>"}function delayLabel(delay){var minutes=Math.floor(Math.abs(delay)/60),seconds=Math.abs(delay)-60*minutes,label="";return minutes&&(label+=minutes.toString()+"m"),seconds&&(label+=seconds.toString()+"s"),minutes&&seconds?'<span class="delay-label '+(0<delay?"late":"early")+'">'+label+"</span>":""}function createIcon(routeType,route,direction,delay){var label="<div>"+vehicleLabel(route,direction)+"</div>";return delayLabel(delay)&&(label+='<div class="delay-cont">'+delayLabel(delay)+"</div>"),L.divIcon({className:"div-icon "+routeType,html:label})}function calculateNearestPoint(shape,longitude,latitude){var beforeIndexLine,beforeIndexDistance,afterIndexLine,line=turf.lineString(shape.map(function(s){return[s.longitude,s.latitude]})),totalDistance=turf.length(line,{units:"kilometers"}),point=turf.point([longitude,latitude]),result=turf.nearestPointOnLine(line,point),index=result.properties.index;return 0===index?(beforeIndexLine=turf.lineString([[longitude,latitude],[shape[0].longitude,shape[0].longitude],[shape[1].longitude,shape[1].latitude]]),beforeIndexDistance=turf.length(beforeIndexLine,{units:"kilometers"}),afterIndexLine=turf.lineString([[shape[0].longitude,shape[0].longitude],[longitude,latitude],[shape[1].longitude,shape[1].latitude]]),index=beforeIndexDistance<turf.length(afterIndexLine,{units:"kilometers"})?0:1):((beforeIndexLine=shape.slice(index-1,index+2)).splice(1,0,{latitude:latitude,longitude:longitude}),beforeIndexLine=turf.lineString(beforeIndexLine.map(function(s){return[s.longitude,s.latitude]})),beforeIndexDistance=turf.length(beforeIndexLine,{units:"kilometers"}),(afterIndexLine=shape.slice(index-1,index+2)).splice(2,0,{latitude:latitude,longitude:longitude}),afterIndexLine=turf.lineString(afterIndexLine.map(function(s){return[s.longitude,s.latitude]})),index=beforeIndexDistance<turf.length(afterIndexLine,{units:"kilometers"})?index:index+1),{distanceFromStart:result.properties.location,distanceToEnd:totalDistance-result.properties.location,index:index}}function getRemainingPath(shape,index,latitude,longitude){var path=shape.slice(index+1);return path.splice(0,0,{latitude:latitude,longitude:longitude}),path.map(function(s){return[s.latitude,s.longitude]})}function calculateDistance(lonLats){var line=turf.lineString(lonLats);return turf.length(line,{units:"kilometers"})}function calculatePointToLineDistance(shape,latitude,longitude){var pt=turf.point([longitude,latitude]),line=turf.lineString(shape.map(function(s){return[s.longitude,s.latitude]}));return turf.pointToLineDistance(pt,line,{units:"kilometers"})}function getPosition(longitude,latitude,shape){var position;if(longitude&&latitude)position={longitude:longitude,latitude:latitude};else for(var currentTime=60*(new Date).getHours()+(new Date).getMinutes(),i=0;i<shape.length;i++){var waypoint=shape[i];if(position={latitude:waypoint.latitude,longitude:waypoint.longitude},waypoint.isStop)if(currentTime<60*+waypoint.departureTime.substring(0,2)+ +waypoint.departureTime.substring(3,5))break}return position}map.on("zoom",toggleLabels);var isFetching=!1;function getFeed(){if(!isFetching){isFetching=!0,spinner.spin($refresh);var feedUrl=URI("feed").addSearch("h",(new Date).getHours()).addSearch("m",(new Date).getMinutes()).addSearch("routes",search.routes);return fetch(feedUrl.toString()).then(function(response){return response.json().then(function(entities){entities.forEach(function(e){var marker=vehicleLayerLookup[e.id];if(marker){var icon=createIcon(e.routeType,e.route,e.direction,e.delay);marker.setIcon(icon),marker._icon&&(e.longitude&&e.latitude?L.DomUtil.removeClass(marker._icon,"disconnected"):L.DomUtil.addClass(marker._icon,"disconnected"));var currentPosition=getPosition(e.longitude,e.latitude,marker.options.shape);if(!marker.options||!marker.options.shape)return marker.setLatLng([currentPosition.latitude,currentPosition.longitude]),marker.options.lastPosition={latitude:currentPosition.latitude,longitude:currentPosition.longitude},void(marker.options.updatedAt=(new Date).getTime());var distanceFromLastPosition=calculateDistance([[marker.options.lastPosition.longitude,marker.options.lastPosition.latitude],[currentPosition.longitude,currentPosition.latitude]]),distanceFromPath=calculatePointToLineDistance(marker.options.shape,currentPosition.latitude,currentPosition.longitude);if(distanceFromLastPosition<MOVEMENT_THRESHOLD||PATH_THRESHOLD<distanceFromPath)return marker.stop(),marker.setLatLng([currentPosition.latitude,currentPosition.longitude]),marker.options.lastPosition={latitude:currentPosition.latitude,longitude:currentPosition.longitude},void(marker.options.updatedAt=(new Date).getTime());if((currNearestPoint=calculateNearestPoint(marker.options.shape,currentPosition.longitude,currentPosition.latitude)).index+1>=marker.options.shape.length)return marker.stop(),marker.setLatLng([currentPosition.latitude,currentPosition.longitude]),marker.options.lastPosition={latitude:currentPosition.latitude,longitude:currentPosition.longitude},void(marker.options.updatedAt=(new Date).getTime());var elapsedTime=(new Date).getTime()-marker.options.updatedAt,prevNearestPoint=calculateNearestPoint(marker.options.shape,marker.options.lastPosition.longitude,marker.options.lastPosition.latitude),remainingShape=(Math.abs(prevNearestPoint.distanceToEnd-currNearestPoint.distanceToEnd),marker.options.shape.slice(currNearestPoint.index)),durations=remainingShape.map(function(s){s.durationFromPrevWaypoint,s.speed});marker.stop(),marker._latlngs=getRemainingPath(marker.options.shape,currNearestPoint.index,currentPosition.latitude,currentPosition.longitude).map(L.latLng),marker._durations=durations,marker._currentDuration=0,marker._currentIndex=0,marker._state=L.Marker.MovingMarker.notStartedState,marker._startTime=0,marker._startTimeStamp=0,marker._pauseStartTime=0,marker._animId=0,marker._animRequested=!1,marker._currentLine=[],marker._stations={},marker.start(),remainingShape.forEach(function(s,i){s.isStop&&marker.addStation(i,STOP_DURATION)}),marker.options.lastPosition={latitude:currentPosition.latitude,longitude:currentPosition.longitude},marker.options.updatedAt=(new Date).getTime()}else{icon=createIcon(e.routeType,e.route,e.direction,e.delay);if(e.shape&&e.shape.length){if(e.stopTimes){for(var i=0;i<e.stopTimes.length;i++){var currStopTime=e.stopTimes[i];currStopTime.isStop=!0;var currNearestPoint=calculateNearestPoint(e.shape,currStopTime.longitude,currStopTime.latitude);if(0<i){var prevStopTime=e.stopTimes[i-1];currStopTime.durationFromPrevStop=Date.parse(ARBITARY_DATE+currStopTime.arrivalTime)-Date.parse(ARBITARY_DATE+prevStopTime.departureTime);prevNearestPoint=calculateNearestPoint(e.shape,prevStopTime.longitude,prevStopTime.latitude);currStopTime.distanceFromPrevStop=prevNearestPoint.distanceToEnd-currNearestPoint.distanceToEnd,currStopTime.speed=currStopTime.distanceFromPrevStop/currStopTime.durationFromPrevStop}e.shape.splice(currNearestPoint.index,0,currStopTime)}for(i=1;i<e.shape.length;i++){var nextStop=e.shape.find(function(waypoint,index){return i<index&&waypoint.isStop}),currWaypoint=e.shape[i],prevWaypoint=e.shape[i-1];currWaypoint.distanceFromPrevWaypoint=calculateDistance([[prevWaypoint.longitude,prevWaypoint.latitude],[currWaypoint.longitude,currWaypoint.latitude]]),currWaypoint.isStop||(currWaypoint.speed=nextStop&&nextStop.speed||INITIAL_SPEED/60/60/1e3),currWaypoint.durationFromPrevWaypoint=currWaypoint.distanceFromPrevWaypoint/currWaypoint.speed}}var position=getPosition(e.longitude,e.latitude,e.shape),nearestPoint=calculateNearestPoint(e.shape,position.longitude,position.latitude),remainingPath=getRemainingPath(e.shape,nearestPoint.index,position.latitude,position.longitude);marker=L.Marker.movingMarker(remainingPath,0,{icon:icon,shape:e.shape,lastPosition:{longitude:position.longitude,latitude:position.latitude},updatedAt:(new Date).getTime()})}else e.latitude&&e.longitude&&(marker=L.marker([e.latitude,e.longitude],{icon:icon,lastPosition:{latitude:e.latitude,longitude:e.longitude},updatedAt:(new Date).getTime()}));if(marker){marker.addTo(layerGroup),marker.on("click",function(){shapeGroup.clearLayers(),e.shape&&L.polyline(e.shape.map(function(s){return[s.latitude,s.longitude]}),{className:"shape "+e.routeType}).addTo(shapeGroup)});var bounds=(vehicleLayerLookup[e.id]=marker)._icon.firstChild.getBoundingClientRect();icon.options.iconSize=[bounds.width,bounds.height],marker.setIcon(icon),e.longitude&&e.latitude?L.DomUtil.removeClass(marker._icon,"disconnected"):L.DomUtil.addClass(marker._icon,"disconnected")}}});var entityIds=entities.map(function(e){return e.id});Object.keys(vehicleLayerLookup).filter(function(l){return!entityIds.includes(l)}).forEach(function(l){vehicleLayerLookup[l].remove()}),spinner.stop(),isFetching=!1})}).catch(function(e){for(var id in vehicleLayerLookup){var marker=vehicleLayerLookup[id];marker.stop&&marker.stop(),marker._icon&&L.DomUtil.addClass(marker._icon,"disconnected")}spinner.stop(),isFetching=!1,console.error(e)})}}getFeed().then(toggleLabels),setInterval(getFeed,REFRESH_INTERVAL);